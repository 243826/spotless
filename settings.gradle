pluginManagement {
	plugins {
		id 'com.diffplug.spotless' version '5.0.0'
	}
}
plugins {
	id 'com.diffplug.spotless' apply false
}
if (System.env['CI'] != null) {
	// use the remote buildcache on all CI builds
	buildCache {
		def cred = {
			if (System.env[it] != null) {
				return System.env[it]
			} else {
				return System.getProperty(it)
			}
		}
		remote(HttpBuildCache) {
			url = 'https://buildcache.diffplug.com/cache/'
			// but we only push if it's a trusted build (not PRs)
			String user = cred('buildcacheuser')
			String pass = cred('buildcachepass')
			if (user != null && pass != null) {
				push = true
				credentials {
					username = user
					password = pass
				}
			} else {
				credentials { username = 'anonymous' }
			}
		}
	}
}

include 'ide'				// easy dev setup

include 'lib'		// reusable library with no dependencies
include 'testlib'	// library for sharing test infrastructure between the projects below

include 'lib-extra'	// reusable library with lots of dependencies
include 'plugin-gradle'	// gradle-specific glue code

if (org.gradle.api.JavaVersion.current() == org.gradle.api.JavaVersion.VERSION_1_8) {
	// only build Java 8
	if (System.getenv('SPOTLESS_EXCLUDE_MAVEN') != 'true' && System.getenv('JITPACK') != 'true') {
		include 'plugin-maven'	// maven-specific glue code
	}
}

def getStartProperty(java.lang.String name) {
	def value = startParameter.getProjectProperties().get(name)
	if(null != value) {
		return value
	}
	// user properties are not available in the startParameter
	def userPropertiesFile = new java.io.File(startParameter.getGradleUserHomeDir(), 'gradle.properties')
	def userProperties = new java.util.Properties()
	if (userPropertiesFile.exists()) {
		userProperties.load(userPropertiesFile.newReader())
	}
	return userProperties.get(name)

}

// include external (_ext) projects from development builds
if (getStartProperty('com.diffplug.spotless.include.ext') == 'true') {
	file('_ext').eachDirMatch(~/^(?!(\.|gradle)).*/) { dir ->
		include dir.name
		project(":${dir.name}").projectDir = dir
	}
}

// include external (_ext) projects from development builds, but disable the p2 parts
if (getStartProperty('com.diffplug.spotless.include.ext.nop2') == 'true') {
	file('_ext').eachDirMatch(~/^(?!(\.|gradle)).*/) { dir ->
		include dir.name
		project(":${dir.name}").projectDir = dir
	}
}

// the p2-based projects are too expensive for routine CI builds, so they have to be invoked explicitly
for (kind in [
	'cdt',
	'groovy',
	'wtp'
]) {
	if (getStartProperty("com.diffplug.spotless.include.ext.${kind}") == 'true') {
		include "eclipse-${kind}"
		project(":eclipse-${kind}").projectDir = file("_ext/eclipse-${kind}")
	}
}
