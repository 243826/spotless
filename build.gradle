buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		// uploads artifacts to jcenter
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${VER_BINTRAY}"
	}
}

repositories {
	jcenter()
	ivy {
		// Eclipse 4.5 M6 has lots of formatter improvements
		// Future versions can be found here: http://download.eclipse.org/eclipse/downloads/index.html
		url "http://download.eclipse.org/eclipse/updates/4.5milestones/S-4.5M6-201503200800/"
		layout "pattern", {
			artifact "plugins/[artifact]_[revision].[ext]"
		}

		// There isn't a reliable way to get eclipse artifacts except through p2 repositories,
		// which gradle does not yet support.  For now we're forcing it with ivy.
		// https://discuss.gradle.org/t/is-it-possible-to-configure-a-p2-repository/6812/6

		// You might think this is crappy, and try to find some kind of maven upload.
		// You'll find a couple random artifacts, but they're all a trap.  Mismatching
		// versions and missing deps.
		//
		// The sweetest of the honeypots is https://repo.eclipse.org/content/groups/eclipse/
		// Please heed my warning fellow traveler: it is a trap!
	}
}

apply plugin: 'java'
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

// None of these eclipse jars are in the public repositories.  This means
// that when someone downloads this plugin, unless they add the weird
// ivy depenency, they won't be able to resolve the eclipse jars.
//
// To fix this, we embed the content of these eclispe jars into ourselves, as a "fat jar".
// As of now (v1.3), the jar is 8MB, which isn't awful.
configurations {
	embeddedJars
}

dependencies {
	compile gradleApi()

	// The only dependencies we actually use
	embeddedJars 'p2:org.eclipse.jdt.core:3.11.0.v20150317-0048'
	embeddedJars 'p2:org.eclipse.text:3.5.400.v20140915-2351'

	// Because gradle can't consume p2, we have to resolve the transitive dependencies - and their versions - by hand.
	// The transitive dependencies are extremely unlikely to change, but we're probably going to want to upgrade to newer versions of Eclipse.
	// Here's how:
	// - Download http://download.eclipse.org/eclipse/updates/4.5milestones/S-4.5M6-201503200800/artifacts.jar
	// - Unzip this file, and you'll have artifacts.xml
	// - Grep through the file for the plugin id, and copy the version below
	embeddedJars 'p2:org.eclipse.core.contenttype:3.4.200.v20150316-1243'
	embeddedJars 'p2:org.eclipse.core.jobs:3.7.0.v20150316-1238'
	embeddedJars 'p2:org.eclipse.core.runtime:3.11.0.v20150316-1241'
	embeddedJars 'p2:org.eclipse.core.resources:3.9.100.v20150313-1707'
	embeddedJars 'p2:org.eclipse.equinox.common:3.7.0.v20150318-1503'
	embeddedJars 'p2:org.eclipse.equinox.preferences:3.5.300.v20150313-2125'
	embeddedJars 'p2:org.eclipse.osgi:3.10.100.v20150318-0312'

	configurations.compile.extendsFrom(configurations.embeddedJars)
}

jar {
	// this embeds the eclipse jars into our "fat jar"
	from {
		configurations.embeddedJars.collect { it.isDirectory() ? it : zipTree(it) }
	}
	// the eclipse jars are signed, and our fat jar breaks the signatures
	// so we've gotta be sure to filter out the signatures
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
}

// There are a couple tests which run in Eclipse,
// and also in "real-life", but fail inexplicably
// with the gradle test runner.
test {
	exclude('**/*FailsInGradle.class')
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			// remove the p2 dependencies because they are embedded
			pom.withXml {
				asNode().dependencies.'*'.each() {
					if (it.groupId.text() == 'p2') {
						it.parent().remove(it)
					}
				}
			}
		}
	}
}

/////////////
// BINTRAY //
/////////////
if (project.hasProperty('dp_bintray_user')) {
	apply plugin: 'com.jfrog.bintray'
	bintray {
		user = dp_bintray_user
		key = dp_bintray_key

		publish=false
		publications = ['mavenJava']
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			desc = project.description
			websiteUrl = "https://github.com/${org}/${name}"
			issueTrackerUrl = "https://github.com/${org}/${name}/issues"
			vcsUrl = "https://github.com/${org}/${name}"
			licenses = ['Apache-2.0']
			publicDownloadNumbers = true
			// Optional version descriptor
			version {
				name = project.version
				if (project.version.endsWith('SNAPSHOT')) {
					vcsTag = 'develop'
				} else {
					vcsTag = 'v' + project.version
				}
			}
		}
	}
	// surprisingly, this actually needs to be here
	bintrayUpload.dependsOn(publish, sourcesJar, javadocJar)
}
