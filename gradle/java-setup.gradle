//////////
// JAVA //
//////////
repositories {
	jcenter()
}

// setup java
apply plugin: 'java'

sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'medium'	// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compileOnly 'com.google.code.findbugs:annotations:3.0.0'
	compileOnly 'com.google.code.findbugs:jsr305:3.0.0'
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

// use markdown in javadoc
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${name}:${version}") +
' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'

def verSnapshot = { it.endsWith('-SNAPSHOT') ? 'snapshot' : it }

javadoc {
	// Where it's possible to name parameters and methods clearly enough
	// that javadoc is not necessary, why make the code bigger?
	//
	// Thus, no javadoc warnings.
	options.addStringOption('Xdoclint:none', '-quiet')
	// setup the header
	options.header javadocInfo
	options.footer javadocInfo
	// setup links
	options.linksOffline('https://docs.oracle.com/javase/8/docs/api/', 'gradle/javadoc/java8')
	options.linksOffline("https://docs.gradle.org/2.14/javadoc/", 'gradle/javadoc/gradle')
	options.linksOffline("https://diffplug.github.io/durian/javadoc/${verSnapshot(VER_DURIAN)}/", 'gradle/javadoc/durian')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
ext.isSnapshot = project.version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

model {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact jar
				artifact sourcesJar
				artifact javadocJar

				groupId project.group
				artifactId project.ext.artifactId

				pom.withXml {
					// add MavenCentral requirements to the POM
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						description project.description
						url "https://github.com/${project.org}/${project.name}"
						scm {
							url "https://github.com/${project.org}/${project.name}"
							connection "scm:git:git://github.com/${project.org}/${project.name}"
							developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
						}
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/license/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						developers {
							developer {
								id 'nedtwigg'
								name 'Ned Twigg'
								email 'ned.twigg@diffplug.com'
							}
						}
					}
				}
			}
		}
		if (project.ext.isSnapshot) {
			// upload snapshots to oss.sonatype.org
			repositories { maven {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
				credentials {
					username = cred('nexus_user')
					password = cred('nexus_pass')
				}
			} }
		}
	}
}

if (!ext.isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['pluginMaven']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			version {
				name = project.version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
}
